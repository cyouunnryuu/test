#include "iodefine.h"
#include "vect.h"

#define LED_PORT PORT1.PODR.BIT.B5
#define DELAY_VALUE  50000

#pragma address (VRCR_BYTE=0x00080200)           //VRCR
char VRCR_BYTE;
unsigned short addata=0;
unsigned int time=0;
int b=0;//中断の中で発送した回数
int t2=0;//デジタルチューブの発送した回数
int t;//目下SPIでどのデジタルチューブに発送したフラグ

unsigned long QIANWAN;
unsigned long BAIWAN;
unsigned long SHIWAN;
unsigned long WAN;
unsigned long QIAN;
unsigned long BAI;
unsigned long SHI;
unsigned long GE;


int tem=0;
long tem2=0;

char TX_BUFF[9]={'0','.','0','0','0','V','\n','\r','\0'};
char *ptr_tx = TX_BUFF;
int m=0;
char ge = 0;
char shi = 0;
char bai = 0;
char qian = 0;


/*　関数のプロトタイプ宣言　*/

void PORT_INITIALIZE(void);
void change_oscillation_Main_Clock(); 
void Intial_TIMER_MTU0();
void Intial_SPI();
void Digital_tube_drive();
void ADinit(void);
void Intial_SCI1_Serial_Interface();
long Digital_tube_Decimal_to_hexadecimal_number(long value);
/*デジタルチューブ設置 //LSB=PABCDEFG  {0,1,2,3,4,5,6,7,8,9,*}={0x81,0xcf,0x92,0x86,0xcc,0xa4,0xa0,0x8f,0x80,0x84,0xff}　*/
/**************************************************************************************************************************
***************************************************************************************************************************/


/*　メイン関数　*/
void main(void)
{	
	
	PORT_INITIALIZE();        			 		//全ポート出力　全ポートＬＯＷ
	change_oscillation_Main_Clock();					//set mainclock_20MHZ
	Intial_TIMER_MTU0();
	Intial_SPI();
	ADinit();
	Intial_SCI1_Serial_Interface();
	
	
	while(1)
	{	
		if(time>=100)
		{ 
				LED_PORT=~LED_PORT;
			
			S12AD.ADCSR.BIT.ADST = 1; 		//A/D変換許可
			while (0!= S12AD.ADCSR.BIT.ADST)
   {
        /* Confirm that the written value can be read correctly. */
   }
			addata=S12AD.ADDR0;//
			tem = 5*1000*addata/4096;
			ge=(char)((tem%10)+48);
			shi=(char)((tem%100)/10+48);
			bai=(char)((tem%1000)/100+48);
			qian=(char)((tem/1000)+48);
			TX_BUFF[0]=qian;
			TX_BUFF[2]=bai;
			TX_BUFF[3]=shi;
			TX_BUFF[4]=ge;

			
			SCI1.SCR.BIT.TIE=1;
			SCI1.SCR.BIT.TE=1;
						
			if((4500 < tem) && (tem < 6000)) 
			  tem2=8;
			else 
			  tem2=0xff;
			GE=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((3750 < tem) && (tem < 6000))
			  tem2=7;
			else 
			  tem2=0xff;
			SHI=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((3125 < tem) && (tem < 6000)) 
			  tem2=6;
			else 
		      	  tem2=0xff;
			BAI=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((2500 < tem) && (tem < 6000)) 
			  tem2=5;
			else 
			  tem2=0xff;
			QIAN=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((1875 < tem) && (tem < 6000))
			  tem2=4;
			else 
			  tem2=0xff;
			WAN=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((1250 < tem) && (tem < 6000))
			  tem2=3;
			else 
			  tem2=0xff;
			SHIWAN=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((625 < tem) && (tem < 6000))
			  tem2=2;
			else 
			  tem2=0xff;
			BAIWAN=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			if((70 < tem) && (tem < 6000))
			  tem2=1;
			else 
			  tem2=0xff;
			QIANWAN=Digital_tube_Decimal_to_hexadecimal_number(tem2);
			
			Digital_tube_drive();
			time=0;
			
		}			
	
	}             
	
}
		

/*　Ｉ／Ｏポート初期化関数　*/
void PORT_INITIALIZE(void)
{
	PORT0.PDR.BYTE = 0xFF;
	PORT1.PDR.BYTE = 0xFF;
	PORT2.PDR.BYTE = 0xFF;
	PORT3.PDR.BYTE = 0x00;  //P37.P36　クロック20MHZ
	PORT4.PDR.BYTE = 0xFF;
	PORT5.PDR.BYTE = 0xFF;
	PORTA.PDR.BYTE = 0xFF;
	PORTB.PDR.BYTE = 0xFF;
	PORTC.PDR.BYTE = 0xFF;
	PORTD.PDR.BYTE = 0xFF;
	PORTE.PDR.BYTE = 0xFF;
	PORTH.PDR.BYTE = 0xFF;
	PORTJ.PDR.BYTE = 0xFF;
	
	PORT0.PODR.BYTE = 0x00;
	PORT1.PODR.BYTE = 0xFF;
	PORT2.PODR.BYTE = 0x00;
	PORT3.PODR.BYTE = 0x00;
	PORT4.PODR.BYTE = 0x00;
	PORT5.PODR.BYTE = 0x00;
	PORTA.PODR.BYTE = 0x00;
	PORTB.PODR.BYTE = 0x00;
	PORTC.PODR.BYTE = 0x00;
	PORTD.PODR.BYTE = 0x00;
	PORTE.PODR.BYTE = 0x00;
	PORTH.PODR.BYTE = 0x00;
	PORTJ.PODR.BYTE = 0x00;
}

void change_oscillation_Main_Clock()
{
    unsigned int  i;
	
	SYSTEM.PRCR.WORD=0xA507;			//Protect 解除
	
	VRCR_BYTE=0x00;    					//VRCR写0
	
	
	SYSTEM.MOSCWTCR.BYTE=0x0F;  		//クリック安定時間設置、20MHZ  50ns*262144>10ms 
		while (0x0F != SYSTEM.MOSCWTCR.BYTE)
   {
        /* Confirm that the written value can be read correctly. */
   }
 /*   SYSTEM.SCKCR.BIT.PCKD=0x4; /*PCKD16分頻　　PCLK:ADCLK 分頻比1:2 PCLKB20MHZ，ADCLK40MHZ
								周辺モジュールクロックPCLK（注1）とA/D変換クロックADCLK（注1）を以下の分周比で設定可能
								PCLK：ADCLK分周比 = 1：1、1：2、1：4、1：8、2：1、4：1    ADCLKの設定はクロック発生回路で行います
								
								周辺モジュールクロックPCLKはSCKCR.PCKB[3:0]ビットで設定した周波数、A/D変換クロックADCLKは
								SCKCR.PCKD[3:0]ビットで設定した周波数になります。*/
	
/*	SYSTEM.SCKCR.BIT.PCKB=0x2; //PCKB4分頻 PCLK to ADCLK frequency division ratio = 1:4
	
	
	while (0x0004!= SYSTEM.SCKCR.BIT.PCKD)
   {
        /* Confirm that the written value can be read correctly. */
   //}
	SYSTEM.MOFCR.BYTE=0x30;    	 	//Main Clock Oscillator Drive Capability Switch 20MHZ not lead type ceramic resonator Resonator
	SYSTEM.MOSCCR.BYTE=0x00;       		//Main Clock動作
	while (0x00 != SYSTEM.MOSCCR.BYTE)
   {
        /* Confirm that the written value can be read correctly. */
   }	
	
	for(i=0;i<50000;i++) {}    		    //Wait
    SYSTEM.SCKCR3.WORD=0x0200;        			//Change system clock>>20MHZ
	
	while (0x0200 != SYSTEM.SCKCR3.WORD)
   {
        /* Confirm that the written value can be read correctly. */
   }


	SYSTEM.PRCR.WORD=0xA500;
	
}




void Intial_TIMER_MTU0()
{
	
	SYSTEM.PRCR.WORD=0xA502;			//Protect 解除
	SYSTEM.MSTPCRA.BIT.MSTPA9=0;        //MSTPA9マルチファンクションタイマパルスユニットモジュールストップ設定ビット
	MTU0.TCR.BYTE=0x20;					//TGRAのコンペアマッチ/インプットキャプチャでTCNTクリア
	//MTU0.TGRA=0x1387;   				//5MHZ 1ms  T=(N+1)/PCLK
	MTU0.TGRA=0x4E21;   				//1ms  T=PCLK/(N+1)
	MTU0.TCNT=0x0000;					//MTU0タイマイニシャル
	MTU0.TIER.BIT.TGIEA = 1;			//タイマ割り込み発生許可
	ICU.IPR[114].BIT.IPR = 2;			//割り込みレベル設定
	ICU.IER[0x0E].BIT.IEN2 = 1;			//割り込み要求許可
	while (1!= ICU.IER[0x0E].BIT.IEN2)
   {
        /* Confirm that the written value can be read correctly. */
   }
	MTU.TSTR.BIT.CST0 = 1;
	SYSTEM.PRCR.WORD=0xA500;

}


void Intial_SPI()
{
	/*Intial_SPI*/
	SYSTEM.PRCR.WORD=0xA502;			
	//write Protect 解除
    	SYSTEM.MSTPCRB.BIT.MSTPB17=0;		
	//対象モジュール：RSPI0
        //0：モジュールストップ状態の解除
        //1：モジュールストップ状態へ遷移
   	while (0!= SYSTEM.MSTPCRB.BIT.MSTPB17)
   {
        /* Confirm that the written value can be read correctly. */
   }
	SYSTEM.PRCR.WORD=0xA500; //write Protect
		
	/***************************************************************/
	
	RSPI0.SPPCR.BYTE = 0x20; /////RSPI端子制御(SPPCR)
	/*b0 SPLP RSPIループバックビット		0：通常モード  1：ループバックモード（送信データの反転＝受信データ）
	　b1 SPLP2 RSPIループバック2ビット 		0：通常モード  1：ループバックモード（送信データ＝受信データ）
    　b3-b2  予約ビット読むと“0”が読めます。書く場合、“0”としてください
    　b4 MOIFV MOSIアイドル固定値ビット		0：MOSIアイドル時のMOSIA端子の出力値はLow         1：MOSIアイドル時のMOSIA端子の出力値はHigh
	　b5 MOIFE MOSIアイドル値固定許可ビット	0：MOSI出力値は前回転送の最終データ		 		　1：MOSI出力値はMOIFVビットの設定値
	　b7-b6  予約ビット読むと“0”が読めます。書く場合、“0”としてください*/
    	RSPI0.SPBR.BYTE = 1;
	/*SPBRレジスタの設定値（n）BRDV[1:0]ビットの設定値（N）分周比ビットレートPCLK＝20MHz
		0 			 0 			 2 	 16.0 Mbps（注1）
		1			 0 			 4 	  8.00 Mbps	//8M以下が必要！！
		2			 0			 6 	  5.33 Mbps
		3 			 0	 		 8 	  4.00 Mbps
		4			 0 			10 	  3.20 Mbps　　
		5 			 0 			12 	  2.67 Mbps
		5 			 1 			24 	  1.33Mbps
		5	  	 	 2 			48 	  667 kbps
		5 			 3 			96 	  333 kbps
	    255 		 3 		    4096  7.81 kbps*/
	RSPI0.SPDCR.BYTE = 0x30; //1フレーム,SPDRレジスタへはワードアクセス_16BIT,SPDRは発信バッファを読み出す.
	   /*ビット		シンボル		ビット名		機能
	    b1-b0 SPFC[1:0] フレーム数設定ビット 				b1 b0
										0 0：1フレーム
										0 1：2フレーム
										1 0：3フレーム
										1 1：4フレーム

	    b3-b2 ? 予約ビット読むと“0”が読めます。書く場合、“0”としてください
	    b4 SPRDTD RSPI受信/送信データ選択ビット
										0：SPDRは受信バッファを読み出す
										1：SPDRは送信バッファを読み出す（ただし、送信バッファが空のとき）

	    b5 SPLW RSPIロングワードアクセス/ワードアクセス設定ビット
										0：SPDRレジスタへはワードアクセス
										1：SPDRレジスタへはロングワードアクセス

	    b7-b6 ? 予約ビット読むと“0”が読めます。書く場合、“0”としてください*/
	
	RSPI0.SPSCR.BYTE = 0x00; // シーケンス長1
	/*b2 to b0 SPSLN[2:0] RSPI Sequence Length	Specification
							b2 b0 Sequence Length Referenced SPCMD0 to SPCMD7 (No.)
							0 0 0: 1 0→0→…
							0 0 1: 2 0→1→0→…
							0 1 0: 3 0→1→2→0→…
							0 1 1: 4 0→1→2→3→0→…
							1 0 0: 5 0→1→2→3→4→0→…
							1 0 1: 6 0→1→2→3→4→5→0→…
							1 1 0: 7 0→1→2→3→4→5→6→0→…
							1 1 1: 8 0→1→2→3→4→5→6→7→0→…
							SPCMD0 to SPCMD7 to be referenced and the order in which they
							are referenced are changed according to the sequence length that is
							set in these bits. The relationship among the setting of these bits,
							sequence length, and SPCMD0 to SPCMD7 registers referenced by
							the RSPI is shown above. However, the RSPI in slave mode always
							references SPCMD0.
							b7 to b3 ? Reserved These bits are read as 0. The write value should be 0.*/
	
	RSPI0.SPCKD.BYTE = 0x04; //RSPI Clock Delay Register  　5RSPCK
	RSPI0.SSLND.BYTE = 0x04; //SSL Negation Delay Setting  　5RSPCK
    	RSPI0.SPND.BYTE  = 0x04; //RSPI Next-Access Delay Setting      5RSPCK
	RSPI0.SPCR2.BYTE = 0x00; //
	/*b0 	SPPE	 パリティ許可ビット		0：送信データパリティビットを付加しない受信データのパリティチェックを行わない
							1：送信データにパリティビットを付加し、受信データのパリティチェックを行う（SPCR.TXMD=0のとき）
							　 送信データにパリティビットを付加するが、受信データのパリティチェックは行わない（SPCR.TXMD=1のとき）

	b1 　　SPOE 　 パリティモードビット		0：偶数パリティで送受信	             1：奇数パリティで送受信
	b2     SPIIE   RSPIアイドル割り込み許可ビット   0：アイドル割り込み要求の発生を禁止  1：アイドル割り込み要求の発生を許可
	b3     PTE     パリティ自己判断ビット	        0：パリティ回路自己診断機能は無効    1：パリティ回路自己診断機能が有効
	b7-b4 ? 予約ビット読むと“0”が読めます。書く場合、“0”としてくださ*/
	RSPI0.SPCMD0.WORD = 0xf700; //data length 8  LSB first
	RSPI0.SPCMD1.WORD = 0xf700; //
	RSPI0.SPCMD2.WORD = 0xf700; //
	RSPI0.SPCMD3.WORD = 0xf700; //
	RSPI0.SPCMD4.WORD = 0xf700; //
	RSPI0.SPCMD5.WORD = 0xf700; //
	RSPI0.SPCMD6.WORD = 0xf700; //
	RSPI0.SPCMD7.WORD = 0xf700; //
	
      /*Bit 		Symbol 				Bit Name   				Description 
	b0 		CPHA 				RSPCK Phase Setting			0: Data sampling on odd edge, data variation on even edge
															1: Data variation on odd edge, data sampling on even edge
	b1 		CPOL 				RSPCK Polarity Setting 			0: RSPCK is low when idle
											1: RSPCK is high when idle
	b3, b2  	BRDV[1:0] 			Bit Rate Division Setting b3 b2
															0 0: These bits select the base bit rate
															0 1: These bits select the base bit rate divided by 2
															1 0: These bits select the base bit rate divided by 4
															1 1: These bits select the base bit rate divided by 8
	b6 to b4 	SSLA[2:0] 			SSL Signal Assertion Setting b6 b4
															0 0 0: SSL0
															0 0 1: SSL1
															0 1 0: SSL2
															0 1 1: SSL3
															1 x x: Setting prohibited
															x: Don’t care
	b7 		SSLKP 				SSL Signal Level Keeping 	0: Negates all SSL signals upon completion of transfer
										        1: Keeps the SSL signal level from the end of transfer until the beginning of the next access
	b11 to b8 	SPB[3:0] 			RSPI Data Length Setting b11 b8
																	0100 to 0111: 8 bits
																	1 0 0 0: 9 bits
																	1 0 0 1: 10 bits
																	1 0 1 0: 11 bits
																	1 0 1 1: 12 bits
																	1 1 0 0: 13 bits
																	1 1 0 1: 14 bits
																	1 1 1 0: 15 bits
																	1 1 1 1: 16 bits
																	0 0 0 0: 20 bits
																	0 0 0 1: 24 bits
																	0010, 0011: 32 bits
	b12		LSBF 					RSPI LSB First 					0: MSB first
														1: LSB first
	b13 		SPNDEN 				RSPI Next-Access Delay Enable
											0: A next-access delay of 1 RSPCK + 2 PCLK
											1: A next-access delay is equal to the setting of the RSPI nextaccess delay register (SPND)
	b14 		SLNDEN 				SSL Negation Delay Setting Enable
											0: An SSL negation delay of 1 RSPCK
											1: An SSL negation delay is equal to the setting of the RSPI slave select negation delay register (SSLND)
	b15 		SCKDEN 				RSPCK Delay Setting Enable 	0: An RSPCK delay of 1 RSPCK
											1: An RSPCK delay is equal to the setting of the RSPI clock delay register (SPCKD)*/

	ICU.IPR[44].BIT.IPR = 3;	//SPTI0割り込みレベル設定
	ICU.IER[0x05].BIT.IEN6 = 1;	//SPTI0割り込み要求許可
	
	/*Intial_ SPI_IO  PA5=RSPCKA PA6=MOSIA*/
	PORTA.PDR.BIT.B5   = 0;
	PORTA.PDR.BIT.B6   = 0;
	
	PORTA.PMR.BIT.B5   = 0;	 //通用model
	PORTA.PMR.BIT.B6   = 0;	 //通用model
	
	MPC.PWPR.BIT.B0WI  = 0;  //0書き込み許可　1書き込み禁止
	MPC.PWPR.BIT.PFSWE = 1;  //0書き込み禁止　1書き込み許可
   
	MPC.PA5PFS.BYTE=0x0D;    //PSEL These bits select the peripheral function. For individual pin functions
	MPC.PA6PFS.BYTE=0x0D;    //PSEL These bits select the peripheral function. For individual pin functions	
    
	while ( 0x0D!=MPC.PA6PFS.BYTE)
   {
        /* Confirm that the written value can be read correctly. */
   }
	
	MPC.PWPR.BIT.PFSWE = 0;  //0書き込み禁止　1書き込み許可
	MPC.PWPR.BIT.B0WI  = 1;  //0書き込み許可　1書き込み禁止

	PORTA.PMR.BIT.B5   = 1;	 //Use pin as I/O port for peripheral functions RSPCKA
	PORTA.PMR.BIT.B6   = 1;	 //Use pin as I/O port for peripheral functions MOSI
	while ( 1!=PORTA.PMR.BIT.B6)
   {
        /* Confirm that the written value can be read correctly. */
   }
	

	//RSPI0.SPCR.BYTE = 0x6B;    //発送中断許可1同意　  ＲＳＰＩ起動  01101011
	//RSPI0.SPCR.BYTE = 0x2B;    //発送中断許可1同意　  ＲＳＰＩ起動しない
	RSPI0.SPCR.BYTE = 0x0B;    //発送中断許可0不同意　  ＲＳＰＩ起動しない
	
      /*Bit 		Symbol 		Bit Name 					Description 
　	b0 		SPMS 	　　　RSPI Mode Select 					0: SPI operation (four-wire method)
											1: Clock synchronous operation (three-wire method)
	b1 		TXMD 	　Communications Operating Mode　Select			0: Full-duplex synchronous serial communications
											1: Serial communications consisting of only transmit operations
	b2 	　	MODFEN 	　Mode Fault Error Detection Enable 			0: Disables the detection of mode fault error
											1: Enables the detection of mode fault error
	b3 		MSTR 　　　 RSPI Master/Slave Mode Select 			0: Slave mode
											1: Master mode
	b4 		SPEIE 	　　RSPI Error Interrupt Enable			　　　  0: Disables the generation of RSPI error interrupt requests
											1: Enables the generation of RSPI error interrupt requests
	b5 	        SPTIE       RSPI Transmit Interrupt Enable 			0: Disables the generation of RSPI transmit interrupt requests
											1: Enables the generation of RSPI transmit interrupt requests
	b6 		SPE         RSPI Function Enable 				0: Disables the RSPI function
											1: Enables the RSPI function
	b7 		SPRIE       RSPI Receive Interrupt Enable 			0: Disables the generation of RSPI receive interrupt requests
											1: Enables the generation of RSPI receive interrupt requests*/
	RSPI0.SPCR.BYTE;
	
       RSPI0.SPCR.BIT.SPE = 1;//動作開始
	while ( 1!=RSPI0.SPCR.BIT.SPE)
  {
        
   }


}

void Digital_tube_drive()
{
	switch(1)
			{
			 case 1:	RSPI0.SPDR.LONG=GE;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			
			 case 2:
					RSPI0.SPDR.LONG=SHI;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 3:
					
					RSPI0.SPDR.LONG=BAI;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 4:
					
					RSPI0.SPDR.LONG=QIAN;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 5:
					
					RSPI0.SPDR.LONG=WAN;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 6:
					
					RSPI0.SPDR.LONG=SHIWAN;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 7:
					
					RSPI0.SPDR.LONG=BAIWAN;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					
					
			 case 8:
					
					RSPI0.SPDR.LONG=QIANWAN;
					RSPI0.SPSR.BYTE;
					while (0!=RSPI0.SPSR.BIT.IDLNF) ;
					break;
			}

}

void ADinit(void)
{	
SYSTEM.PRCR.WORD=0xa502;		//レジスタプロテクト解除
MSTP(S12AD)=0;					//12bitADモジュールストップ解除
SYSTEM.PRCR.WORD=0xa500;		//プロテクト設定
//*****************************initial port********************************
//*************************************************************************
PORT4.PDR.BIT.B0   = 0;	//通用 端子
PORT4.PMR.BIT.B0   = 0;	//通用端子
	
MPC.PWPR.BIT.B0WI  = 0;  //0書き込み許可　1書き込み禁止
MPC.PWPR.BIT.PFSWE = 1;  //0書き込み禁止　1書き込み許可
MPC.P40PFS.BIT.ASEL = 1; //P40アナログ端子（AN000）で使用
   

while ( 1!=MPC.P40PFS.BIT.ASEL)
{
   /* Confirm that the written value can be read correctly. */
}
	
MPC.PWPR.BIT.PFSWE = 0;  //0書き込み禁止　1書き込み許可
MPC.PWPR.BIT.B0WI  = 1;  //0書き込み許可　1書き込み禁止

PORT4.PMR.BIT.B0 = 1;//P40周辺機能端子
//**************************************************************************
S12AD.ADANSA.BIT.ANSA0 = 1;		//AN000選択
S12AD.ADCSR.WORD = 0x0000;		//割り込み許可、トリが起動禁止、シングルスキャン
//IPR(S12AD,S12ADI0) = 15;		//割り込みレベル設定
//IEN(S12AD,S12ADI0) = 1;			//割り込み許可
//S12AD.ADCSR.BIT.ADST = 1; 		//A/D変換許可
}

long Digital_tube_Decimal_to_hexadecimal_number(long value )
{
	 long value_return;
		
	switch(value)
			{
			 case 0:	value_return= 0x81;
					break;
					
			
			 case 1:
					value_return= 0xcf;
					break;
					
					
			 case 2:
					
					value_return= 0x92;
					break;
					
					
			 case 3:
					
					value_return= 0x86;
					break;
					
					
			 case 4:
					
					value_return= 0xcc;
					break;
					
					
			 case 5:
					
					value_return= 0xa4;
					break;
					
					
			 case 6:
					
					value_return= 0xa0;
					break;
					
					
			 case 7:
					
					value_return= 0x8f;
					break;
					
			 case 8:
					
					value_return= 0x80;
					break;
					
			 case 9:
					
					value_return= 0x84;
					break;
			 default:
			 		value_return= 0xff;
					break;
			}
			return value_return;	
	
}
void Intial_SCI1_Serial_Interface()
{
	
	SYSTEM.PRCR.WORD=0xA502;
	SYSTEM.MSTPCRB.BIT.MSTPB30=0;      //SCI1モジュール　アクティブにする
	while (0!= SYSTEM.MSTPCRB.BIT.MSTPB30)
   {
        /* Confirm that the written value can be read correctly. */
   }
    SYSTEM.PRCR.WORD=0xA500;
	
	SCI1.SCR.BIT.TIE=0;		//Writable only when TE in SCR = 0 
	SCI1.SCR.BIT.RIE=0;		//and RE in SCR = 0 (both serial 
	SCI1.SCR.BIT.TE =0;		//transmission and reception are 
	SCI1.SCR.BIT.RE =0;		//disabled)
	SCI1.SCR.BIT.TEIE=0;	
		while (0!= SCI1.SCR.BIT.TEIE)
   {
        /* Confirm that the written value can be read correctly. */
   }
	
	PORT2.PODR.BIT.B6 = 1;

	PORT2.PDR.BIT.B6   = 1;	 //出力TXD1  
	PORT3.PDR.BIT.B0   = 0;  //入力RXD1
	
	PORT2.PMR.BIT.B6   = 0;	 //通用model
	PORT3.PMR.BIT.B0   = 0;	 //通用model
		
	MPC.PWPR.BIT.B0WI  = 0;  //0書き込み許可　1書き込み禁止
	MPC.PWPR.BIT.PFSWE = 1;  //0書き込み禁止　1書き込み許可
	
	MPC.P26PFS.BYTE=0x0A;    //PSEL These bits select the peripheral function. For individual pin functions
	MPC.P30PFS.BYTE=0x0A;    //PSEL These bits select the peripheral function. For individual pin functions
	
	MPC.PWPR.BIT.PFSWE = 0;  //0書き込み禁止　1書き込み許可
	MPC.PWPR.BIT.B0WI  = 1;  //0書き込み許可　1書き込み禁止
	
	PORT2.PMR.BIT.B6   = 1;	 //Use pin as I/O port for peripheral functions
	PORT3.PMR.BIT.B0   = 1;	 //Use pin as I/O port for peripheral functions
	
	SCI1.SCR.BIT.CKE =0;
	
	SCI1.SMR.BYTE= 0x00;		
	//Asynchronous mode
	//Selects 8 bits as the data length
	//Parity bit addition is not performed
	//1 stop bit
	//Multi-processor communications function is disabled
	//PCLK clock (n = 0)
	SCI1.SCMR.BYTE = 0xF2;
	SCI1.BRR= 64;	//N=64  9600bps
	//SCI1.BRR= 1;	//N=64  9600bps
	
	SCI1.SCR.BIT.TE =0;
	SCI1.SCR.BIT.RE =1;
	SCI1.SCR.BIT.TIE=0;  
	SCI1.SCR.BIT.RIE=1;
	SCI1.SCR.BIT.TEIE=0;
	ICU.IPR[218].BIT.IPR=10;   //SCI1 interrupt level
	ICU.IER[0x1B].BIT.IEN3=1;  //receive interrupt request enable
	ICU.IER[0x1B].BIT.IEN4=1;  //transmit interrupt request enable
	ICU.IER[0x1B].BIT.IEN5=1;  //TEIE interrupt request enable
}

//
/***********************************************************************/
/*                                                                     */
/*  FILE        :intprg.c                                              */
/*  DATE        :Thu, Mar 08, 2018                                     */
/*  DESCRIPTION :Interrupt Program                                     */
/*  CPU TYPE    :RX210                                                 */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.53).    */
/*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
/*                                                                     */
/***********************************************************************/
/************************************************************************
*
* Device     : RX/RX200/RX210
*
* File Name  : intprg.c
*
* Abstract   : Interrupt Program.
*
* History    : 0.10  (2010-12-17)  [Hardware Manual Revision : 0.10] 
*
* NOTE       : THIS IS A TYPICAL EXAMPLE.
*
* Copyright (C) 2010 Renesas Electronics Corporation.
* and Renesas Solutions Corp.
*
************************************************************************/
#include "iodefine.h"
#include <machine.h>
#include "vect.h"
#pragma section IntPRG
extern char buff;
extern char *ptr_tx;
extern int m;
//extern unsigned short addata;
extern unsigned int time;
// Exception(Supervisor Instruction)
void Excep_SuperVisorInst(void){/* brk(){  } */}

// Exception(Undefined Instruction)
void Excep_UndefinedInst(void){/* brk(){  } */}

// Exception(Floating Point)
void Excep_FloatingPoint(void){/* brk(){  } */}

// NMI
void NonMaskableInterrupt(void){/* brk(){  } */}

// Dummy
void Dummy(void){/* brk(){  } */}

// BRK
void Excep_BRK(void){ wait(); }

// BUSERR
void Excep_BUSERR(void){ }

// FCU_FCUERR
void Excep_FCU_FCUERR(void){ }

// FCU_FRDYI
void Excep_FCU_FRDYI(void){ }

// ICU_SWINT
void Excep_ICU_SWINT(void){  }

// CMTU0_CMT0
void Excep_CMTU0_CMT0(void){  }

// CMTU0_CMT1
void Excep_CMTU0_CMT1(void){  }

// CMTU1_CMT2
void Excep_CMTU1_CMT2(void){  }

// CMTU1_CMT3
void Excep_CMTU1_CMT3(void){  }

// CAC_FERRF
void Excep_CAC_FERRF(void){  }

// CAC_MENDF
void Excep_CAC_MENDF(void){  }

// CAC_OVFF
void Excep_CAC_OVFF(void){  }

// RSPI0_SPEI0
void Excep_RSPI0_SPEI0(void){  }

// RSPI0_SPRI0
void Excep_RSPI0_SPRI0(void){  }

// RSPI0_SPTI0
void Excep_RSPI0_SPTI0(void){  }

// RSPI0_SPII0
void Excep_RSPI0_SPII0(void){  }

// DOC_DOPCF
void Excep_DOC_DOPCF(void){  }

// COMPB1
void Excep_COMPB1(void){  }

// COMPB2
void Excep_COMPB2(void){  }

// RTC_COUNTUP
void Excep_RTC_COUNTUP(void){  }

// IRQ0
void Excep_IRQ0(void){  }

// IRQ1
void Excep_IRQ1(void){  }

// IRQ2
void Excep_IRQ2(void){  }

// IRQ3
void Excep_IRQ3(void){  }

// IRQ4
void Excep_IRQ4(void){  }

// IRQ5
void Excep_IRQ5(void){  }

// IRQ6
void Excep_IRQ6(void){  }

// IRQ7
void Excep_IRQ7(void){  }

// LVD1
void Excep_LVD1(void){  }

// LVD2
void Excep_LVD2(void){  }

// RTC_ALARM
void Excep_RTC_ALARM(void){  }

// RTC_PRD
void Excep_RTC_PRD(void){  }

// S12AD0_S12ADI0
void Excep_S12AD0_S12ADI0(void)
{


	//addata=S12AD.ADTSDR;//温度センサの結果を読み出し
	
	
}

// S12AD0_GBADI
void Excep_S12AD0_GBADI(void){  }

// ELC_ELSR18I
void Excep_ELC_ELSR18I(void){  }

// MTU20_TGIA0
void Excep_MTU20_TGIA0(void)
{

time++;
  }

// MTU20_TGIB0
void Excep_MTU20_TGIB0(void){  }

// MTU20_TGIC0
void Excep_MTU20_TGIC0(void){  }

// MTU20_TGID0
void Excep_MTU20_TGID0(void){  }

// MTU20_TGIV0
void Excep_MTU20_TGIV0(void){  }

// MTU20_TGIE0
void Excep_MTU20_TGIE0(void){  }

// MTU20_TGIF0
void Excep_MTU20_TGIF0(void){  }

// MTU21_TGIA1
void Excep_MTU21_TGIA1(void){  }

// MTU21_TGIB1
void Excep_MTU21_TGIB1(void){  }

// MTU21_TGIV1
void Excep_MTU21_TGIV1(void){  }

// MTU21_TGIU1
void Excep_MTU21_TGIU1(void){  }

// MTU22_TGIA2
void Excep_MTU22_TGIA2(void){  }

// MTU22_TGIB2
void Excep_MTU22_TGIB2(void){  }

// MTU22_TGIV2
void Excep_MTU22_TGIV2(void){  }

// MTU22_TGIU2
void Excep_MTU22_TGIU2(void){  }

// MTU23_TGIA3
void Excep_MTU23_TGIA3(void){  }

// MTU23_TGIB3
void Excep_MTU23_TGIB3(void){  }

// MTU23_TGIC3
void Excep_MTU23_TGIC3(void){  }

// MTU23_TGID3
void Excep_MTU23_TGID3(void){  }

// MTU23_TGIV3
void Excep_MTU23_TGIV3(void){  }

// MTU24_TGIA4
void Excep_MTU24_TGIA4(void){  }

// MTU24_TGIB4
void Excep_MTU24_TGIB4(void){  }

// MTU24_TGIC4
void Excep_MTU24_TGIC4(void){  }

// MTU24_TGID4
void Excep_MTU24_TGID4(void){  }

// MTU24_TGIV4
void Excep_MTU24_TGIV4(void){  }

// MTU25_TGIU5
void Excep_MTU25_TGIU5(void){  }

// MTU25_TGIV5
void Excep_MTU25_TGIV5(void){  }

// MTU25_TGIW5
void Excep_MTU25_TGIW5(void){  }

// POE2_OEI1
void Excep_POE2_OEI1(void){  }

// POE2_OEI2
void Excep_POE2_OEI2(void){  }

// TMR0_CMIA0
void Excep_TMR0_CMIA0(void){  }

// TMR0_CMIB0
void Excep_TMR0_CMIB0(void){  }

// TMR0_OVI0
void Excep_TMR0_OVI0(void){  }

// TMR1_CMIA1
void Excep_TMR1_CMIA1(void){  }

// TMR1_CMIB1
void Excep_TMR1_CMIB1(void){  }

// TMR1_OVI1
void Excep_TMR1_OVI1(void){  }

// TMR2_CMIA2
void Excep_TMR2_CMIA2(void){  }

// TMR2_CMIB2
void Excep_TMR2_CMIB2(void){  }

// TMR2_OVI2
void Excep_TMR2_OVI2(void){  }

// TMR3_CMIA3
void Excep_TMR3_CMIA3(void){  }

// TMR3_CMIB3
void Excep_TMR3_CMIB3(void){  }

// TMR3_OVI3
void Excep_TMR3_OVI3(void){  }

// DMAC_DMAC0I
void Excep_DMAC_DMAC0I(void){  }

// DMAC_DMAC1I
void Excep_DMAC_DMAC1I(void){  }

// DMAC_DMAC2I
void Excep_DMAC_DMAC2I(void){  }

// DMAC_DMAC3I
void Excep_DMAC_DMAC3I(void){  }

// SCI0_ERI0
void Excep_SCI0_ERI0(void){  }

// SCI0_RXI0
void Excep_SCI0_RXI0(void){  }

// SCI0_TXI0
void Excep_SCI0_TXI0(void){  }

// SCI0_TEI0
void Excep_SCI0_TEI0(void){  }

// SCI1_ERI1
void Excep_SCI1_ERI1(void){  }

// SCI1_RXI1
void Excep_SCI1_RXI1(void)
{  

}

// SCI1_TXI1
void Excep_SCI1_TXI1(void)
{  
	if(ptr_tx[m]=='\0') 
	{
		SCI1.TDR= ptr_tx[m];
		m=0;
		SCI1.SCR.BIT.TIE=0;
		SCI1.SCR.BIT.TEIE=1;	
	}
	else 
	{
		
		SCI1.TDR= ptr_tx[m];
		m++;
		
	}
}

// SCI1_TEI1
void Excep_SCI1_TEI1(void)
{
	SCI1.SCR.BIT.TE = 0;
	SCI1.SCR.BIT.TEIE = 0;
	ICU.IR[0x1B].BYTE=0;

}

// SCI5_ERI5
void Excep_SCI5_ERI5(void){  }

// SCI5_RXI5
void Excep_SCI5_RXI5(void){  }

// SCI5_TXI5
void Excep_SCI25_TXI5(void){  }

// SCI5_TEI5
void Excep_SCI5_TEI5(void){  }

// SCI6_ERI6
void Excep_SCI6_ERI6(void){  }

// SCI6_RXI6
void Excep_SCI6_RXI6(void){  }

// SCI6_TXI6
void Excep_SCI6_TXI6(void){  }

// SCI6_TEI63
void Excep_SCI6_TEI6(void){  }

// SCI8_ERI8
void Excep_SCI8_ERI8(void){  }

// SCI8_RXI8
void Excep_SCI8_RXI8(void){  }

// SCI8_TXI8
void Excep_SCI8_TXI8(void){  }

// SCI8_TEI8
void Excep_SCI8_TEI8(void){  }

// SCI9_ERI9
void Excep_SCI9_ERI9(void){  }

// SCI9_RXI9
void Excep_SCI9_RXI9(void){  }

// SCI9_TXI9
void Excep_SCI9_TXI9(void){  }

// SCI9_TEI9
void Excep_SCI9_TEI9(void){  }

// SCI12_ERI12
void Excep_SCI12_ERI12(void){  }

// SCI12_RXI12
void Excep_SCI12_RXI12(void){  }

// SCI12_TXI12
void Excep_SCI12_TXI12(void){  }

// SCI12_TEI12
void Excep_SCI12_TEI12(void){  }

// SCI12_SCIX0
void Excep_SCI12_SCIX0(void){  }

// SCI12_SCIX1
void Excep_SCI12_SCIX1(void){  }

// SCI12_SCIX2
void Excep_SCI12_SCIX2(void){  }

// SCI12_SCIX3
void Excep_SCI12_SCIX3(void){  }

// RIIC0_EEI0
void Excep_RIIC0_EEI0(void){  }

// RIIC0_RXI0
void Excep_RIIC0_RXI0(void){  }

// RIIC0_TXI0
void Excep_RIIC0_TXI0(void){  }

// RIIC0_TEI0
void Excep_RIIC0_TEI0(void){  }














